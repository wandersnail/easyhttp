apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "2.0.2"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compileOnly "androidx.appcompat:appcompat:$appcompat_version"
    compileOnly "com.squareup.retrofit2:retrofit:$retrofit2_version"
    compileOnly "com.squareup.retrofit2:adapter-rxjava2:$retrofit2_version"
    compileOnly "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    compileOnly "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"
    compileOnly "com.alibaba:fastjson:$fastjson_version"
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    setClasspath(classpath + project.files(android.getBootClasspath().join(File.pathSeparator)))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task classJar(type: Jar, dependsOn: ['assembleRelease', 'sourcesJar']) {
    from(project.zipTree("${project.buildDir.absolutePath}/intermediates/runtime_library_classes/release/classes.jar"))
    exclude '**/R.class', '**/R$*.class', '**/**/BuildConfig.class', '**/**/BuildConfig$*.class'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives classJar
}