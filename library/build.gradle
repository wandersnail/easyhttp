apply plugin: 'com.android.library'
apply plugin: 'signing'
apply plugin: 'maven'

def lib_version = '2.1.0'
def user_name = 'wandersnail'
def lib_group = 'cn.wandersnail'
def lib_artifact = 'easyhttp'
def lib_packaging = 'aar'
def lib_description = 'http lib for Android'
def lib_website = 'https://github.com/wandersnail/easyhttp'
group = lib_group
version = lib_version
archivesBaseName = lib_artifact

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName lib_version
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compileOnly "androidx.appcompat:appcompat:$appcompat_version"
    compileOnly "com.squareup.retrofit2:retrofit:$retrofit2_version"
    compileOnly "com.squareup.retrofit2:adapter-rxjava2:$retrofit2_version"
    compileOnly "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    compileOnly "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"
    compileOnly "com.alibaba:fastjson:$fastjson_version"
    compileOnly "com.google.code.gson:gson:$gson_version"
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    setClasspath(classpath + project.files(android.getBootClasspath().join(File.pathSeparator)))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task classJar(type: Jar, dependsOn: ['assembleRelease', 'sourcesJar']) {
    from(project.zipTree("${project.buildDir.absolutePath}/intermediates/runtime_library_classes/release/classes.jar"))
    exclude '**/R.class', '**/R$*.class', '**/**/BuildConfig.class', '**/**/BuildConfig$*.class'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives classJar
}

Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load(inputStream)
def ossrhUsername = properties.containsKey('ossrhUsername') ? properties['ossrhUsername'] : ''
def ossrhPassword = properties.containsKey('ossrhPassword') ? properties['ossrhPassword'] : ''

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.project {
                name lib_artifact
                artifactId lib_artifact
                packaging lib_packaging
                description lib_description
                version lib_version
                url lib_website

                scm {
                    url lib_website
                    connection "scm:git:${lib_website}.git"
                    developerConnection "scm:git:${lib_website}.git"
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id user_name
                        name 'Zeng Fansheng'
                        email 'bingmo977@qq.com'
                    }
                }
            }
        }
    }
}